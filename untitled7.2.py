# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kUuIq7Kayo3zQZihlQYIOK1qAZ-2njYF
"""

!pip install -q transformers datasets peft trl bitsandbytes

import os
import torch
from time import time
from datasets import load_dataset
from peft import LoraConfig, PeftModel, prepare_model_for_kbit_training
from transformers import (
    AutoConfig,
    AutoModelForSequenceClassification,
   AutoTokenizer,
    BitsAndBytesConfig,
    TrainingArguments,
)
from trl import SFTTrainer, SFTConfig

!pip install -q transformers datasets peft trl bitsandbytes adapter-transformers

!pip install -q git+https://github.com/adapter-hub/adapter-transformers.git

# Ensure WANDB is either disabled or configured
os.environ["WANDB_DISABLED"] = "false"  # or set to "true" if not using WandB

# Configuration and model setup
compute_dtype = torch.bfloat16
bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=compute_dtype,
    bnb_4bit_use_double_quant=True
)

model_id = "distilbert-base-uncased"  # or "distilbert-base-cased"

time_start = time()
model_config = AutoConfig.from_pretrained(model_id, trust_remote_code=True, max_new_tokens=1024)
model = AutoModelForSequenceClassification.from_pretrained(model_id, trust_remote_code=True, config=model_config, quantization_config=bnb_config)
tokenizer = AutoTokenizer.from_pretrained(model_id)
time_end = time()
print(f"Prepare model, tokenizer: {round(time_end-time_start, 3)} sec.")

# Load and process dataset
dataset_name = "csv"  # Update this to your sentiment dataset
dataset = load_dataset(dataset_name, data_files='/content/mental_health.csv', split="train")  # Use the correct split name
dataset = dataset.shuffle(seed=42).select(range(10000))

def preprocess_data(data):
    return tokenizer(data["text"], truncation=True, padding=True)

dataset = dataset.map(preprocess_data)

# Split the dataset into training and testing
dataset = dataset.train_test_split(test_size=0.01)

peft_config = LoraConfig(
    lora_alpha=64,
    lora_dropout=0.05,
    r=4,
    bias="none",
    task_type="SEQUENCE_CLASSIFICATION",
    target_modules=["classifier"]
)

training_arguments = TrainingArguments(
    output_dir="./results_sentiment_analysis/",
    eval_strategy="steps",  # Updated to eval_strategy
    do_eval=True,
    optim="paged_adamw_8bit",
    per_device_train_batch_size=8,
    gradient_accumulation_steps=2,
    per_device_eval_batch_size=8,
    log_level="debug",
    save_steps=1,
    logging_steps=1,
    learning_rate=8e-6,
    eval_steps=1,
    max_steps=200,
    num_train_epochs=3,
    warmup_steps=3,
    lr_scheduler_type="linear",
)
sft_config = SFTConfig(
    dataset_text_field="input_ids",
    max_seq_length=512,
    output_dir="/content/sample_data/results_sentiment_analysis/"  # Add output_dir here
)

trainer = SFTTrainer(
    model=model,
    train_dataset=dataset['train'],
    eval_dataset=dataset['test'],
    peft_config=peft_config,
    sft_config = SFTConfig(
     dataset_text_field="text",
     max_seq_length=512,
     output_dir="/tmp"),  # Use SFTConfig to set dataset_text_field and max_seq_length
    tokenizer=tokenizer,
    args=training_arguments,
)

trainer.train()







